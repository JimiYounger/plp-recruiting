<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Demio Report Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-color: #4a90e2;
            --secondary-color: #50e3c2;
            --background-color: #f8f9fa;
            --text-color: #333;
            --error-color: #e74c3c;
            --success-color: #27ae60;
        }
        body {
            font-family: 'Inter', sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background-color: var(--background-color);
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
        }
        h1 {
            font-size: 2.5rem;
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 30px;
            text-align: center;
        }
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 30px;
            margin-bottom: 30px;
        }
        select, button {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            border-radius: 6px;
            border: 1px solid #ddd;
            margin-bottom: 20px;
        }
        select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 12px center;
            background-size: 16px;
        }
        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s, transform 0.1s;
            font-weight: 600;
        }
        button:hover {
            background-color: #3a7bc8;
        }
        button:active {
            transform: translateY(1px);
        }
        #progressDiv {
            margin-top: 20px;
            padding: 15px;
            background-color: #e8f0fe;
            border-radius: 6px;
            font-weight: 500;
            text-align: center;
        }
        #notFoundList {
            margin-top: 30px;
        }
        #notFoundList h2 {
            color: var(--error-color);
            font-size: 1.5rem;
            margin-bottom: 15px;
        }
        #notFoundParticipants {
            list-style-type: none;
            padding: 0;
        }
        #notFoundParticipants li {
            background-color: #fff;
            padding: 10px 15px;
            margin-bottom: 10px;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            margin-right: 10px;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
      
   #reportContainer {
        margin-top: 30px;
    }
    #reportList h2 {
        color: var(--primary-color);
        font-size: 1.5rem;
        margin-bottom: 15px;
    }
    #reportList ul {
        list-style-type: none;
        padding: 0;
    }
    #reportList li {
        background-color: #fff;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 4px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    .attended {
        color: var(--success-color);
        font-weight: bold;
    }
    .not-attended {
        color: var(--error-color);
        font-weight: bold;
    }
    .toggle-container {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
        margin-right: 10px;
    }
    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
    }
    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
    }
    input:checked + .slider {
        background-color: var(--primary-color);
    }
    input:checked + .slider:before {
        transform: translateX(26px);
    }
    .slider.round {
        border-radius: 34px;
    }
    .slider.round:before {
        border-radius: 50%;
    }
    </style>
</head>
<body>
 <div class="container">
    <h1>Demio Report Dashboard</h1>
    <div class="card">
        <select id="dateId">
            <option value="">Select an event date</option>
        </select>
        <button id="runReportButton">Generate Report</button>
        <div id="progressDiv"></div>
    </div>
    <div class="card" id="reportContainer" style="display: none;">
        <div class="toggle-container">
            <label class="switch">
                <input type="checkbox" id="viewToggle">
                <span class="slider round"></span>
            </label>
            <span id="toggleLabel">Show: Not Found in Airtable</span>
        </div>
        <div id="reportList"></div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    fetch('/api/demio/event/777054/dates')
        .then(response => response.json())
        .then(dates => {
            const dateIdSelect = document.getElementById('dateId');
            
            // Sort dates chronologically, newest first
            dates.sort((a, b) => b.timestamp - a.timestamp);

            dates.forEach(date => {
                const option = document.createElement('option');
                option.value = date.date_id;
                
                // Convert the timestamp to a friendly date and time
                const localDate = new Date(date.timestamp * 1000);
                const dateOptions = { month: 'long', day: 'numeric', year: 'numeric' };
                const timeOptions = { hour: 'numeric', minute: 'numeric', hour12: true, timeZoneName: 'short' };
                const formattedDate = localDate.toLocaleDateString(undefined, dateOptions);
                const formattedTime = localDate.toLocaleTimeString(undefined, timeOptions);
                
                // Include both the date ID and the formatted date/time
                option.textContent = `${date.date_id} - ${formattedDate} at ${formattedTime}`;
                dateIdSelect.appendChild(option);
            });
        })
        .catch(error => {
            console.error('Error fetching date IDs:', error);
            alert('Failed to load event dates. Please try again later.');
        });

    const runReportButton = document.getElementById('runReportButton');
    const viewToggle = document.getElementById('viewToggle');
    const toggleLabel = document.getElementById('toggleLabel');
    let reportData = [];

    async function fetchAllDemioParticipants(dateId) {
        let allParticipants = [];
        let hasMore = true;
        let offset = 0;
        const limit = 100; // Adjust based on Demio's API limits

        while (hasMore) {
            try {
                const response = await fetch(`/api/demio/report/${dateId}/participants?limit=${limit}&offset=${offset}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                
                if (data.participants && data.participants.length > 0) {
                    allParticipants = allParticipants.concat(data.participants);
                    offset += data.participants.length;
                    hasMore = data.participants.length === limit;
                } else {
                    hasMore = false;
                }
            } catch (error) {
                console.error('Error fetching Demio participants:', error);
                hasMore = false;
            }
        }

        console.log(`Total participants fetched: ${allParticipants.length}`);
        return allParticipants;
    }

    runReportButton.addEventListener('click', async () => {
        const dateId = document.getElementById('dateId').value;
        if (!dateId) {
            alert('Please select an event date before generating the report.');
            return;
        }

        const progressDiv = document.getElementById('progressDiv');
        const reportContainer = document.getElementById('reportContainer');
        const reportList = document.getElementById('reportList');

        reportList.innerHTML = '';
        reportContainer.style.display = 'none';
        runReportButton.disabled = true;
        runReportButton.innerHTML = '<span class="loading"></span>Generating Report...';

        try {
            progressDiv.textContent = 'Fetching participants...';
            const participants = await fetchAllDemioParticipants(dateId);
            console.log(`Fetched ${participants.length} participants from Demio`);

            if (participants.length > 0) {
                progressDiv.textContent = `Updating Airtable records for ${participants.length} participants...`;
                reportData = await updateAirtableRecords(participants, progressDiv);
                console.log(`Processed ${reportData.length} participants for the report`);
                progressDiv.textContent = 'Airtable records updated successfully';

                // Display the report (initially showing only not found in Airtable)
                displayReport(reportData, false);
                reportContainer.style.display = 'block';
            } else {
                progressDiv.textContent = 'No participants found for this event date.';
            }
        } catch (error) {
            console.error('Error running report:', error);
            progressDiv.textContent = 'Failed to generate report. Please check the console for more details.';
        } finally {
            runReportButton.disabled = false;
            runReportButton.textContent = 'Generate Report';
        }
    });

    viewToggle.addEventListener('change', function() {
        displayReport(reportData, this.checked);
        toggleLabel.textContent = this.checked ? 'Show: All Participants' : 'Show: Not Found in Airtable';
    });

    function displayReport(data, showAll) {
        const reportList = document.getElementById('reportList');
        reportList.innerHTML = '<h2>Participant Report</h2>';
        const filteredData = showAll ? data : data.filter(p => !p.foundInAirtable);
        
        console.log(`Displaying ${filteredData.length} out of ${data.length} total participants`);
        
        if (filteredData.length === 0) {
            reportList.innerHTML += '<p>No participants to display.</p>';
            return;
        }

        const ul = document.createElement('ul');
        filteredData.forEach((participant, index) => {
            const li = document.createElement('li');
            li.innerHTML = `
                <strong>${participant.name}</strong> (${participant.email})
                <br>
                Attendance: <span class="${participant.attended ? 'attended' : 'not-attended'}">
                    ${participant.attended ? 'Attended' : 'Did Not Attend'}
                </span>
                <br>
                Airtable: ${participant.foundInAirtable ? 'Found' : 'Not Found'}
            `;
            ul.appendChild(li);
        });
        reportList.appendChild(ul);

        console.log(`Displayed ${ul.children.length} participants in the list`);
    }
});

async function updateAirtableRecords(participants, progressDiv) {
    console.log(`Starting to update ${participants.length} Airtable records`);
    const batchSize = 10;
    const maxRetries = 3;
    const totalBatches = Math.ceil(participants.length / batchSize);
    const reportData = [];

    // Get the Demio Date ID from the select element
    const demioDateId = document.getElementById('dateId').value;

    for (let i = 0; i < participants.length; i += batchSize) {
        const batch = participants.slice(i, i + batchSize);
        const currentBatch = i / batchSize + 1;
        progressDiv.textContent = `Processing batch ${currentBatch} of ${totalBatches}...`;

        for (const participant of batch) {
            const email = participant.email.toLowerCase();
            const attended = participant.attended === true;

            let foundInAirtable = false;
            for (let retry = 0; retry < maxRetries; retry++) {
                try {
                    const response = await fetch(`/api/airtable/getRecordByEmailAndDateId?email=${encodeURIComponent(email)}&dateId=${encodeURIComponent(demioDateId)}`);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const records = await response.json();

                    if (records.length > 0) {
                        const recordId = records[0].id;
                        const updateData = {
                            'Attended Opportunity Night': attended,
                            'Did Not Attend Opportunity Night': !attended
                        };

                        const updateResponse = await fetch(`/api/airtable/updateRecord`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ recordId, fields: updateData })
                        });
                        
                        if (!updateResponse.ok) {
                            throw new Error(`HTTP error! status: ${updateResponse.status}`);
                        }
                        
                        foundInAirtable = true;
                        break;
                    } else {
                        console.log(`Participant not found in Airtable: ${email}`);
                        break;
                    }
                } catch (error) {
                    console.error(`Error updating Airtable record for ${email} (Attempt ${retry + 1}):`, error);
                }
            }

            reportData.push({
                name: participant.name,
                email: participant.email,
                attended: attended,
                foundInAirtable: foundInAirtable
            });
        }

        progressDiv.textContent = `Processed ${Math.min(i + batchSize, participants.length)} of ${participants.length} participants`;
        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    console.log(`Finished processing ${reportData.length} participants`);
    return reportData;
}
</script>
</body>
</html>