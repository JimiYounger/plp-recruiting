<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interview Outcome</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background-color: #f4f4f4;
            color: #4a4a4a;
          
        }
        #company-logo {
            display: block;
            max-width: 25%;
            height: auto;
            margin: 10px auto;
        }
        .container {
            max-width: 1000px;
            width: 95%;
            margin: 20px auto;
            padding: 20px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .candidate-list {
            list-style: none;
        }

        .candidate-list li {
            display: flex;
            flex-direction: column; /* Stack items vertically */
            align-items: center; /* Center items horizontally */
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

        .name {
            font-weight: bold;
            margin-bottom: 5px;
            text-align: center; /* Center the name */
            font-size: 25px;
        }

        /* Styling for icons and buttons together */
        .button-group {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
        }

        .button-group a, .button-group button {
    display: flex; /* Use flexbox for alignment */
    align-items: center;
    justify-content: center;
    border: none;
    border-radius: 15px;
    padding: 10px 15px; /* Adjust padding as needed */
    font-weight: bold;
    cursor: pointer;
    text-decoration: none;
    color: white;
    background-color: #4ac1e0;
    min-width: 175px; /* Set a minimum width for all buttons */
    flex: 1; /* Allow the buttons to grow and fill the space */
}
        .no-thanks-button {
            background-color: #ff4136;
        }

        /* Icon styling adjusted for alignment */
        .name-container {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    min-width: 120px; /* Set the minimum width to be the same as buttons */
}

        .phone-icon, .sms-icon {
            width: 30px;
            height: auto;
            display: block; /* Ensure icons are clickable */
        }

        /* Separator line */
        .separator {
            width: 100%;
            height: 1px;
            background-color: #000;
            margin-top: 20px;
        }
/* Modal Styles */
.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    border-radius: 5px;
    width: 80%;
    max-width: 600px;
    text-align: center;
}

.close {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 25px;
    font-weight: bold;
    cursor: pointer;
}

textarea {
    width: 100%;
    height: 100px;
    resize: none;
    margin-bottom: 10px;
}

#submitReasonButton {
    background-color: #4ac1e0;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
}

        @media (max-width: 790px) {
    .button-group {
        flex-direction: column;
        align-items: stretch; /* Stretch buttons to fill the container */
    }
          .button-group a, .button-group button {
        width: 100%; /* Full width buttons on mobile */
             min-width: 300px;
        margin-bottom: 5px;
    }
          .name-container {
        flex-direction: row;
        justify-content: center; /* Space icons evenly */
        width: 100%; /* Full width on mobile */
    }
          #company-logo {
        max-width: 300px; /* Adjust this value as needed */
    }
}
      /* Modal Styles */
#scheduleInterviewModal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    border-radius: 5px;
    width: 80%;
    max-width: 600px;
    text-align: center;
}

.close {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 25px;
    font-weight: bold;
    cursor: pointer;
}

/* Style for form labels and input fields */
label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input[type="email"],
select,
input[type="datetime-local"] {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
}

/* Style for the "Schedule" button */
#scheduleButton {
    display: block;
    width: 100%;
    padding: 10px 15px;
    border: none;
    border-radius: 15px;
    font-weight: bold;
    cursor: pointer;
    text-decoration: none;
    color: white;
    background-color: #4ac1e0;
}

/* Adjust the background color for hover effect if needed */
#scheduleButton:hover {
    background-color: #3296b1; /* Change to a slightly different color on hover */
}

    </style>
</head>
<body>
    <div class="container">
        <h1>What's Next For {{firstName}} {{lastName}}?</h1>
        <div class="button-group">
            <button id="yesButton" class="decision-button" data-email="{{email}}" data-hiring-manager-email="{{hiringManagerEmail}}" data-time-zone="{{timeZone}}" data-record-id="{{recordId}}">Schedule Offer Call</button>
            <button id="noButton" class="no-thanks-button decision-button" data-record-id="{{recordID}}">Pass On Candidate</button>
        </div>
    </div>

    <!-- Schedule Interview Modal -->
   <div id="scheduleInterviewModal" class="modal">
    <div class="modal-content">
        <span class="close" id="closeModal2">&times;</span>
        <h2>Schedule Call</h2>
        <form id="scheduleInterviewForm">
            <label for="hiringManagerEmail">Hiring Manager Email:</label>
            <input type="email" id="hiringManagerEmail" name="hiringManagerEmail" required>

            <label for="candidateEmail">Candidate Email:</label>
            <input type="email" id="candidateEmail" name="candidateEmail" required>

            <label for="dateTime">Date and Time:</label>
            <input type="datetime-local" id="dateTime" name="dateTime" required>
            
            <input type="hidden" id="hiddenTimeZone" name="timeZone">
            <input type="hidden" id="hiddenCandidateName" name="candidateName">
            <input type="hidden" id="hiddenLeaderName" name="leaderName">
            <input type="hidden" id="hiddenLeaderPhone" name="leaderPhone">
            <input type="hidden" id="hiddenCandidatePhone" name="candidatePhone">
            <input type="hidden" id="hiddenRecordId" name="recordId">


            <button type="button" id="scheduleButton">Schedule</button>
        </form>
    </div>
</div>

    <!-- No Thanks Modal -->
    <div id="noThanksModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Why are you passing on this candidate?</h2>
        <form id="reasonForm" action="/disqualify-candidate" method="POST">
            <textarea id="reasonInput" name="reason" placeholder="Enter your reason here"></textarea>
            <input type="hidden" id="recordId" name="recordId" value="{{recordId}}">
            <button type="submit" id="submitReasonButton">Submit</button>
        </form>
    </div>
</div>


    <script>
        document.getElementById('yesButton').addEventListener('click', function() {
        document.getElementById('scheduleInterviewModal').style.display = 'block';
      });

        document.getElementById('noButton').addEventListener('click', function() {
        document.getElementById('noThanksModal').style.display = 'block';
      });

      // Close modals
      var closeButtons = document.getElementsByClassName('close');
      for (var i = 0; i < closeButtons.length; i++) {
          closeButtons[i].onclick = function() {
              var modal = this.closest('.modal');
              modal.style.display = "none";
          }
      }

      // Close the modal if the user clicks outside of it
      window.onclick = function(event) {
          if (event.target.className === 'modal') {
              event.target.style.display = "none";
          }
      }
            document.getElementById('reasonForm').addEventListener('submit', function(e) {
              e.preventDefault(); // Prevent the default form submission

              const form = e.target;
              const data = new FormData(form);
              const reason = data.get('reason');
              const recordId = data.get('recordId');

              fetch(form.action, {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({ reason, recordId })
              })
              .then(response => response.json())
              .then(data => {
                  console.log('Success:', data);
                  window.location.href = 'https://plp-recruiting.glitch.me/';
              })
              .catch((error) => {
                  console.error('Error:', error);
                  // Handle the error, show an error message if needed
              });
          });
document.getElementById('yesButton').addEventListener('click', function() {
    // Retrieve data from attributes
    var email = this.getAttribute('data-email');
    var hiringManagerEmail = this.getAttribute('data-hiring-manager-email');
    var timeZone = this.getAttribute('data-time-zone');
    var recordId = this.getAttribute('data-record-id');

    // Set the values in the modal inputs
    document.getElementById('candidateEmail').value = email;
    document.getElementById('hiringManagerEmail').value = hiringManagerEmail;
    document.getElementById('hiddenTimeZone').value = timeZone;
    document.getElementById('hiddenRecordId').value = recordId;
  
    var now = new Date();
    var nextDay = new Date(now.getTime() + 24 * 60 * 60 * 1000); // Add 24 hours
    var year = nextDay.getFullYear();
    var month = ('0' + (nextDay.getMonth() + 1)).slice(-2); // Ensure two digits
    var day = ('0' + nextDay.getDate()).slice(-2); // Ensure two digits
    var hours = ('0' + nextDay.getHours()).slice(-2); // Ensure two digits
    var minutes = ('0' + nextDay.getMinutes()).slice(-2); // Ensure two digits

    var nextDayFormatted = `${year}-${month}-${day}T${hours}:${minutes}`;

    // Set the default value for the dateTime input
    document.getElementById('dateTime').value = nextDayFormatted;

    // Display the modal
    document.getElementById('scheduleInterviewModal').style.display = 'block';
});

      document.getElementById('scheduleButton').addEventListener('click', function() {
    // Collect form data
    const form = document.getElementById('scheduleInterviewForm');
    const formData = new FormData(form);
    
    const data = {
        recordId: formData.get('recordId'),
        candidateEmail: formData.get('candidateEmail'),
        hiringManagerEmail: formData.get('hiringManagerEmail'),
        dateTime: formData.get('dateTime'),
        timeZone: formData.get('timeZone'), // Assuming you have set the correct time zone value in this hidden input
        candidateName: formData.get('candidateName'),
        leaderName: formData.get('leaderName'),
        candidatePhone: formData.get('candidatePhone'),
        leaderPhone: formData.get('leaderPhone')
    };

    
    // Send data to your server-side endpoint
    fetch('/schedule-offer-call', { // Replace '/your-server-endpoint' with your actual server-side endpoint
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
      alert("Offer Call Successfully Scheduled");
        // Handle success, such as closing the modal and showing a confirmation message
    })
    .catch((error) => {
        console.error('Error:', error);
        // Handle error, such as showing an error message to the user
    });

    // Close the modal after sending the data
    document.getElementById('scheduleInterviewModal').style.display = 'none';
});

      
    </script>
</body>
</html>
